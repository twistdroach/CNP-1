.include "macros.inc65"
.include "bios.inc65"

.zeropage
.exportzp R0, TMP0
R0:		.res 2
TMP0:	.res 2

.code

.export print_byte_as_hex_chars
print_byte_as_hex_chars:
		pha
		lda #>tmp_hex_string	; print some bytes of memory
		sta R0+1				; in hex with spaces between
		lda #<tmp_hex_string
		sta R0
		pla
		jsr fmt_hex_string
		lda tmp_hex_string
		jsr write_char
		lda tmp_hex_string+1
		jsr write_char
		rts

.export print_nybble_as_hex_digit
print_nybble_as_hex_digit:
		jsr fmt_hex_char
		jsr write_char
		rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; https://github.com/grappendorf/homecomputer-6502/blob/master/firmware/versions/v7-monitor/string.s65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Convert the 4-bit value of the accu into it's hex ascii character
; The hex ascii character is returned in the accu
.export fmt_hex_char
fmt_hex_char:       cmp #10
                    bcc @less_then_10
@greater_then_10:   sec
                    sbc #10
                    clc
                    adc #'A'
                    rts
@less_then_10:      clc
                    adc #'0'
                    rts
					
; Format the value of the accu as a hex string
; The string is written into (R0)..(R0)+2 (3 bytes)
.export fmt_hex_string
fmt_hex_string:     sta TMP0
                    phay
                    ldy #0
                    lda TMP0
                    lsr
                    lsr
                    lsr
                    lsr
                    jsr fmt_hex_char
                    sta (R0),y
                    iny
                    lda TMP0
                    and #$0f
                    jsr fmt_hex_char
                    sta (R0),y
                    iny
                    lda #0
                    sta (R0),y
                    play
                    rts

; Convert the hex character in the accu to its integer value
; The integer value is returned in the accu
scan_hex_char:      cmp #'0'
                    bcc @invalid
                    cmp #('9' + 1)
                    bcs @no_digit
                    sec
                    sbc #'0'
                    rts
@no_digit:          cmp #'A'
                    bcc @invalid
                    cmp #('F' + 1)
                    bcs @no_upper_hex
                    sec
                    sbc #('A' - 10)
                    rts
@no_upper_hex:      cmp #'a'
                    bcc @invalid
                    cmp #('f' + 1)
                    bcs @invalid
                    sec
                    sbc #('a' - 10)
                    rts
@invalid:           lda #0
                    rts

; Convert two hex characters starting at (R0) into an integer value
; The integer value is returned in the accu
scan_hex:           tya
                    pha
                    ldy #0
                    lda (R0),y
                    jsr scan_hex_char
                    asl
                    asl
                    asl
                    asl
                    sta TMP0
                    iny
                    lda (R0),y
                    jsr scan_hex_char
                    ora TMP0
                    sta TMP0
                    pla
                    tay
                    lda TMP0
                    rts

; Convert four hex characters starting at (R0) into an integer value
; The integer value is returned in RES..RES+1
.export scan_hex16
scan_hex16:         phay
                    ldy #0
                    lda (R0),y
                    jsr scan_hex_char
                    asl
                    asl
                    asl
                    asl
                    sta RES + 1
                    iny
                    lda (R0),y
                    jsr scan_hex_char
                    ora RES + 1
                    sta RES + 1
                    iny
                    lda (R0),y
                    jsr scan_hex_char
                    asl
                    asl
                    asl
                    asl
                    sta RES
                    iny
                    lda (R0),y
                    jsr scan_hex_char
                    ora RES
                    sta RES
                    play
                    rts


.bss
		tmp_hex_string:		.res 3
		.export RES
		RES:				.res 2