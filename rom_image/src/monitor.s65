					.setcpu "65c02"

					.include "macros.inc65"
					.include "bios.inc65"
					.include "hex_string_utils.inc65"
					.include "ehbasic.inc65"
					.include "disasm.inc65"
					.include "xmodem.inc65"
					
					.include "display_driver.inc65"

					.zeropage
MON_MEM_PTR:		.res 2

					.bss
BUFFER_LENGTH		=	60
buffer:				.res BUFFER_LENGTH
tmp_hex_string:		.res 3  


.macro resetPixel xval, yval
					lda #$06
					jsr display_write
					lda #xval
					jsr display_write
					lda #yval
					jsr display_write
.endmacro

.macro setPixel xval, yval
					lda #$05
					jsr display_write
					lda #xval
					jsr display_write
					lda #yval
					jsr display_write
.endmacro

					.code
;;;;;;;;;;;;;;;;;;;;;;;; Main monitor entry point
.export monitor_entry
.proc monitor_entry
				putsln "Welcome to the Roach Monitor"
				putsln ""
loop:
				puts "RMON>"						; prompt user for a command
				lda #>buffer
				ldy #<buffer
				ldx #BUFFER_LENGTH
				jsr get_line
				putsln ""
				lda buffer							; let's interpret user's command
				beq loop							; user gave us no input, try again
				cmp #'d'							; dump - display memory
				beq do_dump
				cmp #'h'							; help - display help
				beq do_help
				cmp #'b'
				beq do_basic
				cmp #'u'
				beq do_disassembler
				cmp #'x'
				beq do_xmodem_recv
				cmp #'t'
				beq do_test
				cmp #'r'
				beq do_retest
				cmp #'j'
				beq do_jump
				putsln "Unknown Command"
				jmp loop

do_help:			jmp help
do_dump:			jmp dump
do_basic:			jmp COLD_START
do_disassembler:	jsr DISASM_START
					putsln ""
					jmp loop
do_xmodem_recv:		jsr XModemRcv
					jmp loop
do_jump:			jmp jump
do_retest:			jmp do_retest_2
do_test:
					setPixel $02, $00
					setPixel $03, $00
					setPixel $04, $00
					setPixel $05, $00

					setPixel $01, $01
					setPixel $06, $01

					setPixel $00, $02
					setPixel $02, $02
					setPixel $05, $02
					setPixel $07, $02

					setPixel $00, $03
					setPixel $07, $03

					setPixel $00, $04
					setPixel $02, $04
					setPixel $05, $04
					setPixel $07, $04

					setPixel $00, $05
					setPixel $03, $05
					setPixel $04, $05
					setPixel $07, $05

					setPixel $01, $06
					setPixel $06, $06

					setPixel $02, $07
					setPixel $03, $07
					setPixel $04, $07
					setPixel $05, $07

					jmp loop
do_retest_2:
					resetPixel $02, $00
					resetPixel $03, $00
					resetPixel $04, $00
					resetPixel $05, $00

					resetPixel $01, $01
					resetPixel $06, $01

					resetPixel $00, $02
					resetPixel $02, $02
					resetPixel $05, $02
					resetPixel $07, $02

					resetPixel $00, $03
					resetPixel $07, $03

					resetPixel $00, $04
					resetPixel $02, $04
					resetPixel $05, $04
					resetPixel $07, $04

					resetPixel $00, $05
					resetPixel $03, $05
					resetPixel $04, $05
					resetPixel $07, $05

					resetPixel $01, $06
					resetPixel $06, $06

					resetPixel $02, $07
					resetPixel $03, $07
					resetPixel $04, $07
					resetPixel $05, $07
					jmp loop

;;;;;;;;;;;;;;;;;;;;;;;; Jump to location and execute
					.bss
JUMP_PTR:			.res 2
					.code
.proc jump
				ld16 R0, (buffer+1)		; Parse the location specified
				jsr scan_hex16

				lda RES+1
				sta MON_MEM_PTR+1
				lda RES
				sta MON_MEM_PTR				
				jmp (MON_MEM_PTR)
.endproc

;;;;;;;;;;;;;;;;;;;;;;;; Dump a page of memory
BYTES_TO_DUMP	= 16
LINES_TO_DUMP   = 16
dump:
				ldx	#LINES_TO_DUMP
				ld16 R0, (buffer+1)
				jsr scan_hex16

				lda RES+1
				sta MON_MEM_PTR+1
				lda RES
				sta MON_MEM_PTR
start_line:								; print location
			    ld16 R0, tmp_hex_string
				lda MON_MEM_PTR+1		; print high byte location
				jsr fmt_hex_string
				lda tmp_hex_string
				jsr write_char
				lda tmp_hex_string+1
				jsr write_char
				lda MON_MEM_PTR			; print low byte location
				jsr fmt_hex_string
				lda tmp_hex_string
				jsr write_char
				lda tmp_hex_string+1
				jsr write_char
				
				puts ": "
				
				ldy #0					; start at ptr
dump_next_byte:	
				ld16 R0, tmp_hex_string
				lda (MON_MEM_PTR),y		; print some bytes of memory
				jsr fmt_hex_string		; in hex with spaces between
				lda tmp_hex_string
				jsr write_char
				lda tmp_hex_string+1
				jsr write_char
				lda #' '
				jsr write_char
				iny						
				cpy #BYTES_TO_DUMP		; if we've printed 8, then move on
				bne dump_next_byte
				
				puts "    !"
				;print the ascii version of the bytes
				ldy #0
dump_next_char:							; print same bytes as chars
				lda (MON_MEM_PTR),y
				cmp #$20				; print a . for anything < $20
				bcc print_dot
				cmp #$7F				; print a . for anything >= $7F
				bcs print_dot
				jsr write_char
continue_dump_next_char:
				iny
				cpy #BYTES_TO_DUMP
				bne dump_next_char
				putsln "!"				; end of the dump
				
				dex						; move the ptr and dump another set of bytes
				beq return_to_mon_loop
				clc
				lda MON_MEM_PTR
				adc #BYTES_TO_DUMP
				sta MON_MEM_PTR
				bcc no_carry
				inc MON_MEM_PTR+1
no_carry:		
				jmp start_line
				
print_dot:		puts "."
				jmp continue_dump_next_char

return_to_mon_loop:
				putsln ""
				jmp loop

;;;;;;;;;;;;;;;;;;;;;;;; Print a simple help message
help:
				putsln "Roach Monitor Help"
				putsln ""
				putsln "h       - Print help"
				putsln "d<xxxx> - Dump memory location"
				putsln "b       - Start Microsoft Basic"
				putsln "u       - Start disassembler"
				putsln "x       - Receive data via XModem/CRC and place into memory"
				putsln "          First two bytes should specify start location"
				putsln "t/r     - Test writing directly to display"
				putsln "j<xxxx> - Jump to address and begin execution"
				putsln ""
				jmp loop
.endproc
