;;;From: http://wilsonminesco.com/6502primer/GENRLI2C.ASM
; This file has five sets of source code:
; A. 65c02 source code for running the I2C interface as shown in the 6502
;    primer's "potpourri" page.  I ran it with the actual circuit just enough
;    to have a degree of confidence the I'm not steering you wrong.
; B. a section on changes to make if you use different bit numbers
; C. my working Forth source code for using the 24256 32Kx8 I2C EEPROM.  Even if
;    you don't know Forth, much of it should be pretty clear as to what order
;    things need to happen in to interface to this 8-pin serial EEPROM.
;    It is profusely commented.
; D. my working Forth code for operating the MAX520 quad D/A converter.
; E. my working PIC code for running a tiny 24c00 EEPROM that was put as a
;    separate die in the PIC12CE673 we used for a product.

; Obviously you will need to separate out the needed parts for the applicable
; assembler or compiler.

.feature c_comments

/*
   First:  General I2C material for 65c02, with bit numbers for the
   I2C-interfacing schematic in the 6502 primer's "potpourri" page at
   http://WilsonMinesCo.com/6502primer/potpourri.html

   Power control is on the VIA's PB7.  Holding the port bit high turns the I2C
   power off.  The bit can be used for other things as long as it is not held
   high for more that about 25ms when you want the I2C power to remain on.  This
   lets you simultaneously use PB7 for a beeper or a signal source for something
   else_ at the same time.  (The 25ms here is definitely not exact!)  This does
   mean the other function will have to store the PB7 value and put it back when
   it's done.

   The I2C clock line is on PA0, so you can form a clock pulse with only two
   instructions, INC & DEC.

   The I2C data line is on PA7 so that testing it takes fewer instructions than
   having to AND-out other bits or load the accumulator.

   In I2C, devices (and the controller) can pull the lines down, but not up.
   In most cases it's ok for the controller to pull the clock line up as well as
   down, but here we'll go with pull down only, and use the passive pull-up
   resistors for both data and clock.  The way to do that with the 6522 VIA is
   to put a "0" in the output register bit of interest, then set the
   corresponding bit in the data-direction register (DDRA in this case) to make
   the line an output and pull it down, or clear the DDRA bit to make the line
   an input and let it float up by the pull-up resistor.
*/


.setcpu "65c02"

.bss
I2C_TEMP: .res 1

.include "io.inc65"

.code
.macro I2C_DATA_UP
             LDA   #%10000000   ; Two instructions here.  Clear bit 7 of the DDR
             TRB   DDRA         ; to make PA7 an input and let it float up.
.endmacro
 ;-----------------------

.macro I2C_DATA_DN
             LDA   #%10000000   ; Two instructions here.  Set bit 7 of the DDR
             TSB   DDRA         ; to make PA7 an output and pull it down since
.endmacro		                ; bit 7 of the output register is a 0.
 ;-----------------------

.macro I2C_CLK_UP             ; (as above)
             LDA   #1
             TRB   DDRA
.endmacro
 ;-----------------------

.macro I2C_CLK_DN              ; (as above)
             LDA   #1
             TSB   DDRA
.endmacro
 ;-----------------------
.export I2C_START
I2C_START:   I2C_DATA_UP
             I2C_CLK_UP
             I2C_DATA_DN
 ist1:       INC   DDRA         ; Clk down.  We now know the bit val, so just INC.
             TRB   DDRA         ; Data up, using accum val left from I2C_DATA_DN above.
             RTS
 ;-----------------------
.export I2C_STOP
I2C_STOP:    I2C_DATA_DN
             I2C_CLK_UP
             I2C_DATA_UP
             BRA   ist1
 ;-----------------------
.export I2C_ACK
I2C_ACK:     I2C_DATA_DN        ; Acknowledge.  The ACK bit in I2C is the 9th bit of a "byte".
 ia1:        I2C_CLK_UP         ;               and acknowledging consists of pulling it down.
             INC   DDRA         ; Clk down.  We know the bit val, so just INC.
             I2C_DATA_UP
             RTS
 ;-----------------------
.export I2C_NAK
I2C_NAK:     I2C_DATA_UP        ; Not acknowledge.
             BRA   ia1
 ;-----------------------

CHECK_I2C_ACK_BIT:    I2C_DATA_UP        ; At end, N=0 means ACK.  N=1 means NAK.
             I2C_CLK_UP
             BIT   PA           ; Bit 7 (the data line) gets put in the N flag.
             TSB   DDRA         ; Clk down.  Accum still has 1 from I2C_CLK_UP.  Take advantage.
             RTS
 ;-----------------------
.export INIT_I2C
INIT_I2C:                       ; Set up the port bit directions and values.  Leaves power off, clk & data low.

        LDA     #%10000001               ; Put 10000001B in A for data and clock lines on port A.
        TSB     DDRA            ; Make PA0 and PA7 outputs to hold clock and data low while power is off,
        TRB     PA              ; and make the output value to be 0 for the same.
        RTS                     ; You might want to leave a delay to let the power die out so devices are really
 ;------------------            ;    cleared before turning it back on.  Then you shouldn't need CLR_I2C below.
.export CLR_I2C
CLR_I2C:                        ; This clears any unwanted transaction that might be in progress, by giving
        JSR     I2C_STOP        ;    enough clock pulses to finish a byte and not acknowledging it.
        JSR     I2C_START
        I2C_DATA_UP             ; Keep data line released so we don't ACK any byte sent by a device.
        LDX     #9              ; Loop 9x to send 9 clock pulses to finish any byte a device might send.
 ci2c:     DEC  DDRA            ; Like I2C_CLK_UP since we know I2C_START left clock down (DDRA bit 0 high).
           INC  DDRA            ; Like I2C_CLK_DN since we know the state from the above instruction.
           DEX
        BNE     ci2c
        JSR     I2C_START
        JMP     I2C_STOP        ; (JSR, RTS)
 ;------------------
.export SEND_I2C_BYTE
SEND_I2C_BYTE:                  ; Start with byte in A, and clock low.  Ends with CHECK_I2C_ACK_BIT.
        STA     I2C_TEMP        ; Store the byte in a variable so we can use A with TSB & TRB for data line.
        LDA     #%10000000      ; Init A for mask for TRB & TSB below.  A does not get disturbed below.
        LDX     #8              ; We will do 8 bits.
 sIb2:     TRB  DDRA            ; Release data line.  This is like I2C_DATA_UP but saves 1 instruction.
           ASL  I2C_TEMP        ; Get next bit to send and put it in the C flag.
           BCS  sIb1
              TSB DDRA          ; If the bit was 0, pull data line down by making it an output.
 sIb1:     DEC  DDRA            ; Do a high pulse on the clock line.  Remember there's a 0 in the output
           INC  DDRA            ; register bit, and DEC'ing DDRA makes that bit an input, so it can float up.
           DEX                  ;    IOW, it's backwards from what it seems.
        BNE     sIb2
        JMP     CHECK_I2C_ACK_BIT        ; (JSR, RTS)
 ;------------------
.export RCV_I2C_BYTE
RCV_I2C_BYTE:                   ; Start with clock low.  Ends with byte in A (formerly I2C_TEMP).  Do ACK bit separately.
        I2C_DATA_UP             ; Make sure we're not holding the data line down.  Be ready to input data.
        LDX     #8              ; We will do 8 bits.  There's no need to init I2C_TEMP.
 rIb1:     DEC  DDRA            ; Set clock line high.
           ASL  I2C_TEMP        ; Get the forming byte's next bit position ready to accept the bit.
           BIT  PA              ; Read the data line value into N flag.
           BPL  rIb2            ; If the data line was high,
              INC  I2C_TEMP     ; increment the 1's place to a 1 in the forming byte.  (ASL made bit 0 = 0.)
 rIb2:     INC  DDRA            ; Put clock line back low.
           DEX
        BNE     rIb1            ; Go back for next bit if there is one.
        LDA I2C_TEMP
        RTS
 ;------------------

/*

==============================================================================================================

 SECTION B:   things you need to modify in section A if you use different bits

If you use different bits, the TSB and TRB instructions remain the same, but you cannot use the BIT instruction
by itself to test random bits, or use INC and DEC to produce clock pulses.  BIT puts bit 7 in the N flag and
bit 6 in the V flag, so you could put the data line on bit 6 and test with BIT followed by BVC or BVS; but using
other bits would require using AND to test them, which, depending on how you do it, may require some gymnastics
in handling the value in the accumulator.  The way it is done above in SEND_I2C_BYTE above leaves the accumulator
undisturbed.  To test bit 4 for example, you could do:

        LDA  PA
        AND  #00010000B
        BNE  ...             ; (or BEQ)

or to release it in I2C so the pull-up resistor can make it float up:

        LDA  DDRA
        AND  #11101111B
        STA  DDRA

or to pull it down:

        LDA  DDRA
        ORA  #00010000B
        STA  DDRA

or for an up-down clock pulse:

        LDA  DDRA
        AND  #11101111B
        STA  DDRA
        ORA  #00010000B
        STA  DDRA

which is more instructions and bytes than

        DEC  DDRA
        INC  DDRA

like we can do with the clock on bit 0.

In the unlikely senario that you have the VIA in zero page and a Rockwell or WDC 65c02, you can use the BBS,
BBR, SMB, and RMB direct bit-manipulating instructions.

The circuit given has the master pull the clock line down but never up.  Depending on the capacitive loading
and how fast you want to run the I2C bus, you might want to modify the program to not pull the clock line down
without first verifying (by reading the clock line) that the bus capacitance has been charged up to the high
voltage.  A few devices can also hold the clock line down to indicate to the master that they need a little
more time to process a bit.  If your program waits for it to float up, it will take care of that too.  I did
not put in anything for multi-master systems and how to pass control.



==============================================================================================================

 SECTION C:   my working Forth source code for using the 24256 32Kx8 I2C EEPROM.  Even if you don't know Forth,
              much of it should be pretty clear as to what order things need to happen in to interface to this
              8-pin serial EEPROM.  You can almost just go by the comments in some cases.  In this one, I had
              the clock line fed from a totem-pole output on the master, without a passive pull-up resistor on
              the clock line.


 \ omitted: all the general I2C stuff, translated above into 6502 assembly.  Below is EERPOM-specific.

     [B]
10100000  000 2* OR  CONSTANT 24256_ADR_W       \ SGS Thomson M24256 EEPROM can only have one addr (%1010000x),
  24256_ADR_W  1 OR  CONSTANT 24256_ADR_R       \ and you tack the R/W\ bit on in bit 0.
     [H]
                \ * * * * *  Bit 3 must be a 1 when you want to address the upper 32KB of a 24LC515 64Kx8 EERPOM.


: POLL_EEPROM   ( -- f )                \ Note: per datasheet, no STOP condition is given.
   I2C_START
   24256_ADR_W   SEND_I2C_BYT       ;


: WAIT_TIL_EEPROM_RDY   ( -- )          \ Keep polling the EEPROM until it issues the ACK bit meaning that it's done carrying
   BEGIN  POLL_EEPROM  UNTIL            \ out any previous write instructions, and it's ready to for the next instruction.
   I2C_STOP                         ;   \ * * * * *  This line is new.


: SEND_EEPROM_ADR       ( addr -- )
   WAIT_TIL_EEPROM_RDY                  \ Make sure the EEPROM is finished with any previous WRITE commands.
   I2C_START                            \ Cause a START condition.
   24256_ADR_W  SEND_I2C_BYT  DROP      \ Device select.  Drop ACK flag.
   SPLIT        SEND_I2C_BYT  DROP      \ Send addr hi,         "
                SEND_I2C_BYT  DROP  ;   \ then addr lo.         "


: WR_EEPROM_BYT   ( B addr -- )
   SEND_EEPROM_ADR                      \ First see if EEPROM is ready, do a START condition, and then send address.
   SEND_I2C_BYT  DROP    I2C_STOP   ;   \ Send data, and cause a STOP condition.


: WR_EEPROM_ADR   ( addr -- )
   SEND_EEPROM_ADR       I2C_STOP   ;


: WR_EEPROM_PAGE  ( EEPROM_addr  str_addr  count -- )   \ count can be up to 64 bytes, which will all go in the same
   ROT   SEND_EEPROM_ADR                                \ EEPROM addr row, even if that means it wraps around.  A uChip ap.
   BOUNDS                                               \ note says a given location in their serial EEPROMs will last about
   DO    I C@   SEND_I2C_BYT  DROP                      \ 5x as many writes if it is written to as part of a page write; so
   LOOP              I2C_STOP       ;                   \ if you need to do more than about 15 bytes in a 64-byte page, it
                                                        \ may be best to do the whole page instead of individual bytes.

: RD_EEPROM_BYT   ( -- B )      \ Byte addr must already be set. W/ SGS Thomson, addr is automatically inc'ed aftr each read.
   \ WAIT_TIL_EEPROM_RDY        \ Don't do the polling, because it clears the address you just gave it!
   I2C_STOP
   I2C_START
      24256_ADR_R  SEND_I2C_BYT  DROP   \ Device select, telling it to output data.  (DROP the ACK flag.)
                    RCV_I2C_BYT         \ Get byte, & leave VIA bit as output.
      I2C_NAK                           \ Send a not-acknowledge bit to tell EEPROM to quit and go into standby.
   I2C_STOP             ;


: RD_EEPROM_STREAM   ( destination_mem_addr  count -- )   \ EEPROM addr must already be set.
   \ WAIT_TIL_EEPROM_RDY                \ Don't do the polling, because it clears the address you just gave it!
   I2C_STOP
   I2C_START
      24256_ADR_R  SEND_I2C_BYT  DROP   \ Device select, telling it to output data.  DROP the ACK bit result.
      BOUNDS
      DO   RCV_I2C_BYT   I C!           \ Get byte and store it in RAM.
           R@ -1 =                      \ Are we on the last one?  (See note at CMP_EEPROM.)
           IF   I2C_NAK                 \ If so, answer with not-acknowledge bit.
           ELSE I2C_ACK                 \ Else, acknowledge so the EEPROM doesn't stop yet.
           THEN
      LOOP
   I2C_STOP             ;


: WR_ARRAY    ( beg_RAM_adr  EEPROM_addr  #_of_bytes  --  )    \ As we go, the addresses will climb while the count drops.
   BEGIN   DUP                           \ Is there more to store?       (DUP the #_of_bytes for WHILE to evaluate.)
   WHILE                                 \ If so, work on the next EERPOM page.
      OVER  3F AND       0=              \ Will we start on an EEPROM page boundary,
      OVER  3F >        AND              \ and is there at least a whole page of data left to go?
      IF OVER  3PICK  40  WR_EEPROM_PAGE \ If so, put the next $40 bytes in the next EEPROM page.
         ROT 40 +                        \ Then increment the beginning  RAM   addr by $40,
         ROT 40 +                        \ then increment the beginning EEPROM addr by $40,
         ROT 40 -                        \ and  decrement the number of bytes left to store.
      ELSE
         BEGIN                           \ If not doing a whole EEPROM page, write bytes to EEPROM individually.
            1-                           \ Decrement the number of bytes left to do.
            SWAP DUP >R  1+  SWAP        \ Copy next EEPROM addr to return stack, and increment the EEPROM addr.
            ROT  DUP >R  1+  -ROT        \ Copy next  RAM   addr to return stack, and increment the  RAM   addr.
            R> C@   R>   WR_EEPROM_BYT   \ From return stack, get EEPROM addr, RAM addr, then fetch data, and store it.
            OVER 3F AND 0=               \ Now if the next byte to program would start another EERPOM page,
            OVER        0=   OR          \ or if there are no bytes left to program, then
         UNTIL                           \ leave the BEGIN...UNTIL, either because maybe the next page should be done as a
      THEN                               \ page write or because we're done writing the array.
   REPEAT  3DROP                ;        \ DROP the three parameters from the stack.


\ CMP_EEPROM below is used to see if the EEPROM contents match the CPU memory contents over a range (like for after
\ programming, to make sure I didn't forget to un-write-protect it or something like that).  There's no need to give the
\ address that fails the test.
\ Note here (and in RD_EEPROM_STREAM the use of R@ -1 = in the 9th line.  The way LMI's do and loop work, the R@ gives index
\ minus limit, so I had to do extra work.  When I write my own and fix it, this code here will probably need changing.


: CMP_EEPROM    ( EEPROM_addr  RAM_addr  count --  flag )   \ Flag is true if it checks out with no errors.  Over 2KB/second.
   ROT  WR_EEPROM_ADR                    \ (This ends with a STOP.)
   I2C_START
      24256_ADR_R  SEND_I2C_BYT  DROP    \ Device select, telling it to output data.
      BOUNDS
      DO RCV_I2C_BYT  I C@ <>            \ Get byte.  Is it different from RAM?
         IF  I2C_NAK  FALSE              \ If so, tell the EEPROM to quit sending, output a flag showing that the compare
             UNLOOP   EXIT               \ failed, and exit the loop and the word.
         THEN
         R@ -1 =                         \ Are we on the last one?  (See note in paragraph above.)
         IF   I2C_NAK                    \ If so, answer with a not-acknowledge bit.
         ELSE I2C_ACK                    \ Else, acknowledge so the EEPROM doesn't stop yet.
         THEN
      LOOP
   I2C_STOP  TRUE       ;

==============================================================================================================

 SECTION D:   my working Forth code for operating the MAX520 quad D/A converter.  (I only used two channels.)



                                         [B]
00001000             CONSTANT POWER_UP          \ Command byte to power-up the 520.  (not necessary?)
01010000  011 2* OR  CONSTANT D/A_ADR           \ D/A slave addr is 3 for proto board.
00010000             CONSTANT RESET_BYT         \ Command byte for resetting 520.
00000000             CONSTANT OUTPUT_0          \ Command byte for outputting on ch 0
00000010             CONSTANT OUTPUT_2   [H]    \ Command byte for outputting on ch 2


: RESET_DAC     ( -- )
   INIT_VIA
   I2C_START
      D/A_ADR    SEND_I2C_BYT  DROP             \ I'm just DROPping the ACK bit result.
      RESET_BYT  SEND_I2C_BYT  DROP
   I2C_STOP                             ;


: OUT_0         ( b -- )                        \ Send a byte to D/A output 0.
   I2C_START
      D/A_ADR   SEND_I2C_BYT  DROP
      OUTPUT_0  SEND_I2C_BYT  DROP
                SEND_I2C_BYT  DROP
   I2C_STOP                             ;


: OUT_2         ( b -- )                        \ Send a byte to D/A output 2.
   I2C_START
      D/A_ADR   SEND_I2C_BYT  DROP
      OUTPUT_2  SEND_I2C_BYT  DROP
                SEND_I2C_BYT  DROP
   I2C_STOP                             ;



; last updated Nov 14, 2012
*/